apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: gen-ai-setup
  title: Generative AI Application Setup 0.2
  description: Create and register the Generative AI components on OpenShift
  tags:
    - ai
spec:
  owner: marrober
  type: service
  parameters:
    - title: Application details
      required:
        - team_name
      properties:
        team_name:
          title: Name
          type: string
          maxLength: 20
          pattern: '^[a-z0-9_]*$'
        description:
          title: Description
          type: string
    - title: Application repository Information
      required:
        - repo
      properties:
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              description: Your SCM host
              default: github.com
              enum:
                - github.com
            owner:
              title: Repo Owner
              type: string
              description: Your SCM host organization/group
              default: marrober
              enum:
                - marrober
            token: 
              title: Github authentication token
              type: string
              description: A Github authentication token to be used to create repositories.
  steps:
    - id: log
      name: Log parameters - 1
      action: debug:log
      input: 
        message: 'Parameters -> team_name : ${{ parameters.team_name }} description : ${{ parameters.description }}'

    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          team_name: ${{ parameters.team_name }}
          description: ${{ parameters.description }}
          owner: ${{ user.entity.metadata.name }}
          host: ${{ parameters.repo.host }}
          destination: ${{ parameters.repo.owner }}/${{ parameters.team_name }}
          
    - id: publish
      name: Publish
      action: publish:github
      input:
        repoUrl: "${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{parameters.team_name}}"
        repoVisibility: public
        token: ${{ parameters.repo.token }}

    - id: log
      name: Log parameters - 2
      action: debug:log
      input: 
        message: 'Parameters -> repoContentsUrl : ${{ steps.publish.output.repoContentsUrl }}'

    - id: log
      name: Log parameters - 2-a
      action: debug:log
      input: 
        message: 'Parameters -> owner : ${{ user.entity.metadata.name }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

    - id: log
      name: Log parameters - 3
      action: debug:log
      input: 
        message: 'Parameters -> catalogInfoUrl : ${{ steps.register.output.catalogInfoUrl }}'
  
  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
    message-0: 'Parameters -> component_id : ${{ parameters.component_id }}'
    message-1: 'Parameters -> description  : ${{ parameters.description }}'